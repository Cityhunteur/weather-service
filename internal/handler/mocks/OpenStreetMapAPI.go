// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	openstreetmap "github.com/cityhunteur/weather-service/internal/pkg/openstreetmap"
)

// OpenStreetMapAPI is an autogenerated mock type for the OpenStreetMapAPI type
type OpenStreetMapAPI struct {
	mock.Mock
}

// GetPlace provides a mock function with given fields: ctx, opts
func (_m *OpenStreetMapAPI) GetPlace(ctx context.Context, opts *openstreetmap.GetOptions) ([]*openstreetmap.Place, error) {
	ret := _m.Called(ctx, opts)

	var r0 []*openstreetmap.Place
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *openstreetmap.GetOptions) ([]*openstreetmap.Place, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *openstreetmap.GetOptions) []*openstreetmap.Place); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*openstreetmap.Place)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *openstreetmap.GetOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOpenStreetMapAPI creates a new instance of OpenStreetMapAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenStreetMapAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenStreetMapAPI {
	mock := &OpenStreetMapAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
