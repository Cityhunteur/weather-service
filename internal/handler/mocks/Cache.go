// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	v1 "github.com/cityhunteur/weather-service/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Get provides a mock function with given fields: k
func (_m *Cache) Get(k string) (*v1.Forecast, bool) {
	ret := _m.Called(k)

	var r0 *v1.Forecast
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*v1.Forecast, bool)); ok {
		return rf(k)
	}
	if rf, ok := ret.Get(0).(func(string) *v1.Forecast); ok {
		r0 = rf(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Forecast)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(k)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: k, v
func (_m *Cache) Set(k string, v *v1.Forecast) {
	_m.Called(k, v)
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
